df4
head(df4)
head(df4)
head(t(df4))
head(t(df4))
head(data.frame(t(df4))
data.frame(t(df4))
data.frame(df4)
data.frame(t(df4))
data.frame(t(df4),row.names = NULL)
####xlsx파일읽기####
df5 <- read.delim("excel_exam.xlsx", sep="\t")
df5
####xlsx파일읽기####
df5 <- read.delim(file="excel_exam.xlsx", sep="\t")
####xlsx파일읽기####
df5 <- read.delim2(file="excel_exam.xlsx", sep="\t")
####xlsx파일읽기####
install.packages("readxl")
library("readxl")
df5 <- read_xlsx("07_xlsx.xlsx")
df5
src(df5)
str(df5)
exam <- read.csv("excel_exam.xlsx")
exam <- read.csv("excel_exam.csv")
exam <- read.csv("01_csv.csv")
exam
head(exam, n=5)
tail(exam, 5)
#실제 뷰어로 보기
view(exam)
#실제 뷰어로 보기
view(exam)
#실제 뷰어로 보기
View(exam)
data("mpg")
mpg <- as.data.frame(data("mpg"))
data("mpg")
data(mpg)
data("mpg")
d=data("mpg")
View(mpg)
d=data("mpg")
data("mpg")
library("ggpolt2")
data("mpg")
data(mpg)
mpg
am <- read.csv("01_csv.csv")
exam
#전체 레코드의 맨 위에서부터, 아래에서 부터 정의한 갯수만큼 가져오기
head(exam, n=5)
tail(exam, 5)
#실제 뷰어로 보기
View(exam)
#행의 갯수
nrow(exam)
#열의 갯수
ncol(exam)
#행과 열의 갯수
dim(exam)
#구조확인
str(exam)
#타입확인
class(exam)
View(am)
View(am)
exam <- read.csv("01_csv.csv")
exam
#전체 레코드의 맨 위에서부터, 아래에서 부터 정의한 갯수만큼 가져오기
head(exam, n=5)
tail(exam, 5)
#실제 뷰어로 보기
View(exam)
#행의 갯수
nrow(exam)
#열의 갯수
ncol(exam)
#행과 열의 갯수
dim(exam)
#구조확인
str(exam)
#타입확인
class(exam)
#데이터에 대한 요약 정보
summary(exam)
#타입확인
class(exam)
#구조확인
str(exam)
#데이터에 대한 요약 정보
summary(exam)
library("dplyr")
install.packages("dplyr")
library("dplyr")
library("dplyr")
library("dplyr")
#컬럼의 이름을 변경
install.packages("dplyr")
#컬럼의 이름을 변경
install.packages("dplyr")
library("dplyr")
#rename(data, 변경할 컬럼명=기존컬럼명)
exam <- rename(exam, eng=english)
#rename(data, 변경할 컬럼명=기존컬럼명)
exam <- rename(exam, eng=english)
View(exam)
exam <- read.csv("csv_exam.csv")
exam
#rename(data, 변경할 컬럼명=기존컬럼명)
exam <- rename(exam, eng=english)
exam
exam = data("mpg")
#ggplo2패키지에서 제공되는 mpg데이터를 분석
library("ggplot2")
#ggplo2패키지에서 제공되는 mpg데이터를 분석
library("ggplot2")
exam = data("mpg")
exam
exam = mpg
exam = mpg
exam
####step1. mpg를 dataframe으로 변경####
exam <- data.frame(exam)
exam
class(exam)
####step2. mpg의 정보를 출력####
#행갯수, 열갯수, 위에서 10개 끝에서10개
nrow(exam)
ncol(exam)
head(exam)
tail(exam)
####step3. mpg의 컬럼명을 변경####
#cty -> city, hwy-> highway
install.packages("dplyr")
library("dplyr")
exam <- rename(exam, city=cty)
exam <- rename(exam, highway=hwy)
exam
####step4. 파생변수 생성하기####
#total= cty와 hwy의 합
#avg = cty와 hwy의 평균
total = exam$city+exam$highway
total
avg = total/2
avg
exam <- data.frame(exam,total,avg)
head(exam)
exam = mpg
####step1. mpg를 dataframe으로 변경####
exam <- data.frame(exam)
class(exam)
####step2. mpg의 정보를 출력####
#행갯수, 열갯수, 위에서 10개 끝에서10개
nrow(exam)
ncol(exam)
head(exam,10)
tail(exam,10)
exam <- rename(exam, city=cty)
exam <- rename(exam, highway=hwy)
####step4. 파생변수 생성하기####
#total= cty와 hwy의 합
#avg = cty와 hwy의 평균
total = exam$city+exam$highway
avg = total/2
exam <- data.frame(exam,total,avg)
head(exam)
avg
####step5.생성된 토탈을 가지고 요약정보 확인 ####
summary(exam)
sample(1:10)
a <- sample(1:10)
a
a
a <- sample(1:10)
a
a <- sample(1:10, size=5)
a
a <- sample(1:10, size=15)
a <- sample(1:10, size=5)
a
a
a <- sample(1:10, size=5)
a
a <- sample(1:10, size=5)
a
a <- sample(1:10, size=5)
a
a <- sample(1:10, size=5 , replace = FALSE)
a
a <- sample(1:10, size=5 , replace = FALSE)
a
a <- sample(1:10, size=5 , replace = FALSE)
a
a <- sample(1:10, size=5 , replace = FALSE)
a
a <- sample(1:10, size=5 , replace = FALSE)
a
a <- sample(1:10, size=5 , replace = FALSE)
a
a <- sample(1:10, size=5 , replace = TRUE)
a
a <- sample(1:10, size=5 , replace = TRUE)
a
a <- sample(1:10, size=5 , replace = TRUE)
a
a <- sample(1:10, size=15 , replace = T)
a
a <- sample(1:10, size=15 , replace = F)
a <- sample(1:10, size=5 , replace = F)
a
set.seed(1222)
a <- sample(1:10, size=5 , replace = F)
a
set.seed(1222)
a <- sample(1:10, size=5 , replace = F)
a
set.seed(1222)
a <- sample(1:10, size=5 , replace = F)
a
set.seed(1222)
a <- sample(1:10, size=5 , replace = F)
a
set.seed(1222)
a <- sample(1:10, size=5 , replace = F)
a
set.seed(121)
a <- sample(1:10, size=5 , replace = F)
a
set.seed(121)
a <- sample(1:10, size=5 , replace = F)
a
set.seed(1222)
a <- sample(1:10, size=5 , replace = F)
a
ifdf <- data.frame(mynum=1:6,
myvalue=sample(c("spring","bigdata","android"),size=6,replace=T)
)
ifdf
ifdf <- data.frame(mynum=1:6,
myvalue=sample(c("spring","bigdata","android"),size=6,replace=T)
)
ifdf
set.seed(121)
a <- sample(1:10, size=5 , replace = F)
a
ifdf <- data.frame(mynum=1:6,
myvalue=sample(c("spring","bigdata","android"),size=6,replace=T)
)
ifdf
ifdf <- data.frame(mynum=1:6,
myvalue=sample(c("spring","bigdata","android"),,replace=T)
)
ifdf <- data.frame(mynum=1:6,
myvalue=sample(c("spring","bigdata","android"),,replace=T)
)
ifdf
ifdf <- data.frame(mynum=1:6,
myvalue=sample(c("spring","bigdata","android"),,replace=T)
)
ifdf
ifdf <- data.frame(mynum=1:6,
myvalue=sample(c("spring","bigdata","android"),,replace=T)
)
ifdf
set.seed(1222)
a <- sample(1:10, size=5 , replace = F)
a
ifdf <- data.frame(mynum=1:6,
myvalue=sample(c("spring","bigdata","android"),,replace=T)
)
ifdf
set.seed(1222)
a <- sample(1:10, size=5 , replace = F)
a
ifdf <- data.frame(mynum=1:6,
myvalue=sample(c("spring","bigdata","android"),,replace=T)
)
ifdf
set.seed(1222)
a <- sample(1:10, size=5 , replace = F)
a
ifdf <- data.frame(mynum=1:6,
myvalue=sample(c("spring","bigdata","android"),size=6,replace=T)
)
ifdf
set.seed(1222)
a <- sample(1:10, size=5 , replace = F)
a
ifdf <- data.frame(mynum=1:6,
myvalue=sample(c("spring","bigdata"),size=6,replace=T)
)
ifdf
ifdf[i,"info"] <-"프로젝트완료"
ifdf[i,"info"] <-"할꺼야"
#myval
for(i in 1:nrow(ifdf)){
if(ifdf[i,"myval"]=="spring"){
ifdf[i,"info"] <-"프로젝트완료"
}
else{
ifdf[i,"info"] <-"할꺼야"
}
}
#myval
for(i in 1:nrow(ifdf)){
if(ifdf[i,"myvalue"]=="spring"){
ifdf[i,"info"] <-"프로젝트완료"
}
else{
ifdf[i,"info"] <-"할꺼야"
}
}
#myval
for(i in 1:nrow(ifdf)){
if(ifdf[i,"myvalue"]=="spring"){
ifdf[i,"info"] <-"프로젝트완료"
}
else{
ifdf[i,"info"] <-"할꺼야"
}
}
ifdf
#함수를 이용해서 같은 작업
ifdf[,"info2"] <- ifelse(test=ifdf$myvalue=="spring",yes="쉽다",no="할꺼다")
ifdf
set.seed(1222)
a <- sample(1:10, size=5 , replace = F)
a
ifdf <- data.frame(mynum=1:6,
myvalue=sample(c("spring","bigdata","android"),size=6,replace=T)
)
ifdf
#myval
for(i in 1:nrow(ifdf)){
if(ifdf[i,"myvalue"]=="spring"){
ifdf[i,"info"] <-"프로젝트완료"
}
else{
ifdf[i,"info"] <-"할꺼야"
}
}
#함수를 이용해서 같은 작업
ifdf[,"info2"] <- ifelse(test=ifdf$myvalue=="spring",yes="쉽다",no="할꺼다")
ifdf
ifdf[,"info3"] <- ifelse(test=ifdf$myvalue=="spring",yes="쉽다",no="할꺼다")
ifdf
set.seed(1222)
a <- sample(1:10, size=5 , replace = F)
a
ifdf <- data.frame(mynum=1:6,
myvalue=sample(c("spring","bigdata","android"),size=6,replace=T)
)
ifdf
#myval
for(i in 1:nrow(ifdf)){
if(ifdf[i,"myvalue"]=="spring"){
ifdf[i,"info"] <-"프로젝트완료"
}
else{
ifdf[i,"info"] <-"할꺼야"
}
}
#함수를 이용해서 같은 작업
ifdf[,"info2"] <- ifelse(test=ifdf$myvalue=="spring",yes="쉽다",no="할꺼다")
ifdf
ifdf[,"info3"] <- ifelse(test=ifdf$myvalue=="spring",yes="쉽다",no="할꺼다")
ifdf
set.seed(1232)
a <- sample(1:10, size=5 , replace = F)
a
ifdf <- data.frame(mynum=1:6,
myvalue=sample(c("spring","bigdata","android"),size=6,replace=T)
)
ifdf
#myval
for(i in 1:nrow(ifdf)){
if(ifdf[i,"myvalue"]=="spring"){
ifdf[i,"info"] <-"프로젝트완료"
}
else{
ifdf[i,"info"] <-"할꺼야"
}
}
#함수를 이용해서 같은 작업
ifdf[,"info2"] <- ifelse(test=ifdf$myvalue=="spring",yes="쉽다",no="할꺼다")
ifdf
ifdf[,"info3"] <- ifelse(test=ifdf$myvalue=="spring",yes="쉽다",no= ifelse(test=ifdf$myvalue=="bigdata",yes="빅데이터",no="앤드류"))
ifdf
ifdf[,"info4"] <- "쉽다"
ifdf
ifdf[,"info4"] <- ifelse(test=ifdf$myvalue=="bigdata",yes="빅데이터",no="앤드류"))
ifdf
ifdf[,"info4"] <- ifelse(test=ifdf$myvalue=="bigdata",yes="빅데이터",no="앤드류")
ifdf
####step6. info컬럼 추가 ####
#total값을 이용해서 평가 20이상이면 pass, 아니면 fail
exam[,"info"] <- ifelse(test=total>=20, yes="pass", no="fail")
####step6. info컬럼 추가 ####
#total값을 이용해서 평가 20이상이면 pass, 아니면 fail
exam[,"info"] <- ifelse(test=exam$total>=20, yes="pass", no="fail")
#ggplo2패키지에서 제공되는 mpg데이터를 분석
library("ggplot2")
exam = mpg
####step1. mpg를 dataframe으로 변경####
exam <- data.frame(exam)
class(exam)
####step2. mpg의 정보를 출력####
#행갯수, 열갯수, 위에서 10개 끝에서10개
nrow(exam)
ncol(exam)
head(exam,10)
tail(exam,10)
####step3. mpg의 컬럼명을 변경####
#cty -> city, hwy-> highway
install.packages("dplyr")
library("dplyr")
exam <- rename(exam, city=cty)
exam <- rename(exam, highway=hwy)
####step4. 파생변수 생성하기####
#total= cty와 hwy의 합
#avg = cty와 hwy의 평균
total = exam$city+exam$highway
avg = total/2
install.packages("dplyr")
exam <- data.frame(exam,total,avg)
####step6. info컬럼 추가 ####
#total값을 이용해서 평가 20이상이면 pass, 아니면 fail
exam[,"info"] <- ifelse(test=exam$total>=20, yes="pass", no="fail")
install.packages("dplyr")
####step7. grade컬럼 추가 ####
install.packages("dplyr")
exam
View(exam)
####step7. grade컬럼 추가 ####
#30이상 A, 25이상 B, 20이상 C, 나머지 D
exam[,"grade"] <-
?switch()
####step7. grade컬럼 추가 ####
#30이상 A, 25이상 B, 20이상 C, 나머지 D
exam[,"grade"] <-
?switch()
?switch()
exam[,"grade"] <- ifelse(test=test1, yes="A", no=ifelse(test=test2,yes="B",no=ifelse(test=test3,yes="C",no="B")))
####step7. grade컬럼 추가 ####
#30이상 A, 25이상 B, 20이상 C, 나머지 D
test1=exam$total>=30
test2=exam$total>=25
test3=exam$total>=20
exam[,"grade"] <- ifelse(test=test1, yes="A", no=ifelse(test=test2,yes="B",no=ifelse(test=test3,yes="C",no="B")))
exam
exam <- read.csv("csv_exam.csv")
exam
#전체 레코드의 맨 위에서부터, 아래에서 부터 정의한 갯수만큼 가져오기
head(exam, n=5)
tail(exam, 5)
#실제 뷰어로 보기
View(exam)
#행의 갯수
nrow(exam)
#열의 갯수
ncol(exam)
#행과 열의 갯수
dim(exam)
#타입확인
class(exam)
#구조확인
str(exam)
#데이터에 대한 요약 정보
summary(exam)
#컬럼의 이름을 변경
install.packages("dplyr")
#rename(data, 변경할 컬럼명=기존컬럼명)
exam <- rename(exam, eng=english)
exam
install.packages("dplyr")
install.packages("dplyr")
exam
#rename(data, 변경할 컬럼명=기존컬럼명)
exam <- rename(exam, eng=english)
library("dplyr")
#rename(data, 변경할 컬럼명=기존컬럼명)
exam <- rename(exam, eng=english)
table(exam$eng
exam
table(exam$eng)
library("ggplot2")
qplot(exam$eng)
midwest
df = data.frame(midwest)
df = rename(df,total=poptotal)
df = rename(df,asian=popasian)
df
df[,perasian] <- df$asian/df$total
df[,"perasian"] <- df$asian/df$total
head(df)
df[,"perasian"] <- 100*df$asian/df$total
head(df)
####4####
totalasianavg = 100*sum(df$asian)/sum(df$total)
totalasianavg
df[,"exam"] <- ifelse(test=totalasianavg<df$perasian,yes="large",no="small")
head(df)
View(df)
View(df)
qplot(df$exam)
####4####
totalasianavg = mean(df$perasian)
totalasianavg
df[,"exam"] <- ifelse(test=totalasianavg<df$perasian,yes="large",no="small")
qplot(df$exam)
