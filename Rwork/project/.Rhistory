temp$price <- as.numeric(temp$price)
prepro <- bind_rows(prepro,temp)
url <- "https://www.bobaedream.co.kr/mycar/mycar_list.php?gubun=K&maker_no=49&group_no=5&page=1&order=S11&view_size=70"
readPage <- read_html(url,encoding="utf-8")
readPage %>% html_nodes("li.product-item") -> data
data
readPage %>% html_nodes(".tit > a") %>% html_attr("title") -> title
company <- str_remove(title," (?<=\\s).*")
model <- str_remove(title,".\\w(?>\\s)")
readPage %>% html_nodes(".mode-cell.year > .text") %>% html_text() -> yy
yy
yy <- paste("20",yy)
yy <- gsub("\\(.*?\\)|&nbsp;| ","", yy)
mm <- gsub(".*/","",yy)
yy <- gsub("/.*","",yy)
yy <- as.integer(yy)
mm <- as.integer(mm)
old <- ((year(now())-yy)*12 + (month(now())-mm))
old
readPage %>% html_nodes(".mode-cell.fuel > .text") %>% html_text() -> fuel
fuel
readPage %>% html_nodes(".mode-cell.km > .text") %>% html_text() -> km
km <- gsub("천","000",km)
km <- gsub("만","0000",km)
km <- gsub("km","",km)
km <- as.numeric(km)
km
readPage %>% html_nodes(".mode-cell.price") -> price
price <- gsub("<.*?>|\r|\n|\t|&nbsp;","", price)
price <- gsub("  ","",price)
price <- gsub("만원|,","",price)
price <- price[-1]
price
result <- data.frame(company,model,old,fuel,km,price, stringsAsFactors = F)
temp <- result[!(result$price == "팔림"),]
temp <- temp[!(str_detect(temp$price,"할부")),]
temp <- temp[!(str_detect(temp$price,"계약")),]
temp <- temp[!(str_detect(temp$price,"만료")),]
temp <- temp[!(str_detect(temp$price,"운용리스")),]
temp <- temp[!(str_detect(temp$price,"상담")),]
temp <- temp[!(temp$price == "보류"),]
temp
temp$price <- as.numeric(temp$price)
prepro <- bind_rows(prepro,temp)
boxplot(prepro$km)
boxplot(prepro$old)
boxplot(prepro$price)
boxplot(prepro$price)
boxplot(prepro$old)
boxplot(prepro$old)
View(prepro)
prepro$old <- ifelse(prepro$old < 0 | prepro$old > 1000, NA, prepro$old)
prepro$price <- ifelse(prepro$price < 0 | prepro$price > 9000, NA, prepro$price)
prepro <- na.omit(prepro)
p
#1. 이상치 제거 후 재확인
boxplot(prepro$km)
boxplot(prepro$old)
boxplot(prepro$price)
#3.correlation
cor(prepro[c(3,5,6)])
pairs(prepro[c(3,5,6)])
prepro <- read.csv("prepro.csv")
#one hot encoing용 dummy생성
dmy <- dummyVars(formula = ~company, data = prepro)
dmy
prepro_new <- data.frame(prepro,predict(dmy, newdata = prepro))
prepro_new
#test, train table 분리
smp_size <- floor(0.7 * nrow(prepro_new))
set.seed(456)
train_ind <- sample(seq_len(nrow(prepro_new)), size = smp_size)
train2 <- prepro_new[train_ind, ]
test2 <- prepro_new[-train_ind, ]
# 굳이 c()로 한 이유가 있긴한데 설명하기가 너무 복잡함... 안하면 오류나여
out2 = glm(price~., data=train2[,c(4,6,7,8)])
out2
summary(out2)
confint.default(out2)
pairs.panels(train2,method = "pearson", density = TRUE, ellipses = TRUE, hist.col = "#00AFBB",scale=TRUE)
#ggplot(data=test2[], aes(x=c(1:count(test2)), y=test2[]$diff))+ geom_point()
ggplot(data=test2[], aes(x=test2[]$price,y=test2[]$prediction))+geom_point(alpha = 1, aes(color=company))+geom_abline(slope = 1)+coord_cartesian(xlim = c(0,3000), ylim = c(0,3000))
pairs.panels(train2,method = "pearson", density = TRUE, ellipses = TRUE, hist.col = "#00AFBB",scale=TRUE)
pairs(train2$price~train2$old+train2$km, lower.panel = NULL)
test2[,"prediction"] <- prediction2
test2[,"diff"] <- test2$price - test2$prediction
prediction2 <- round(predict(out2,test2,interval = "prediction"),0)
test2[,"prediction"] <- prediction2
test2[,"diff"] <- test2$price - test2$prediction
test2
#ggplot(data=test2[], aes(x=c(1:count(test2)), y=test2[]$diff))+ geom_point()
ggplot(data=test2[], aes(x=test2[]$price,y=test2[]$prediction))+geom_point(alpha = 1, aes(color=company))+geom_abline(slope = 1)+coord_cartesian(xlim = c(0,3000), ylim = c(0,3000))
R2_Score(test2[]$prediction,test2[]$price)
MAPE(test2[]$prediction,test2[]$price)
MAE(test2[]$prediction,test2[]$price)
# 굳이 c()로 한 이유가 있긴한데 설명하기가 너무 복잡함... 안하면 오류나여
out2 = glm(price~., data=train2[,c(4,6,7,8)])
out2
summary(out2)
confint.default(out2)
prediction2 <- round(predict(out2,test2,interval = "prediction"),0)
test2[,"prediction"] <- prediction2
test2[,"diff"] <- test2$price - test2$prediction
test2
R2_Score(test2[]$prediction,test2[]$price)
MAPE(test2[]$prediction,test2[]$price)
MAE(test2[]$prediction,test2[]$price)
# 굳이 c()로 한 이유가 있긴한데 설명하기가 너무 복잡함... 안하면 오류나여
out2 = lm(price~., data=train2[,c(4,6,7,8)])
prediction2 <- round(predict(out2,test2,interval = "prediction"),0)
test2[,"prediction"] <- prediction2[,1]
test2[,"diff"] <- test2$price - test2$prediction
test2
#ggplot(data=test2[], aes(x=c(1:count(test2)), y=test2[]$diff))+ geom_point()
ggplot(data=test2[], aes(x=test2[]$price,y=test2[]$prediction))+geom_point(alpha = 1, aes(color=company))+geom_abline(slope = 1)+coord_cartesian(xlim = c(0,3000), ylim = c(0,3000))
R2_Score(test2[]$prediction,test2[]$price)
MAPE(test2[]$prediction,test2[]$price)
MAE(test2[]$prediction,test2[]$price)
dmy <- dummyVars(formula = ~model, data = prepro,sep = "")
dmy
prepro_test <- data.frame(prepro,predict(dmy, newdata = prepro))
prepro_test
dmy <- dummyVars(formula = ~model, data = prepro)
dmy
prepro_test <- data.frame(prepro,predict(dmy, newdata = prepro))
prepro_test
View(prepro_test)
View(prepro)
#test, train table 분리
smp_size <- floor(0.7 * nrow(prepro_test))
set.seed(456)
train_ind <- sample(seq_len(nrow(prepro_test)), size = smp_size)
train3 <- prepro_test[train_ind, ]
test3 <- prepro_test[-train_ind, ]
View(train3)
out3 = lm(price~., data=train3[,c(4,6,7:199)])
out3
summary(out3)
confint.default(out3)
pairs(train3$price~train3$old+train3$km, lower.panel = NULL)
prediction3 <- round(predict(out3,test3,interval = "prediction"),0)
test3[,"prediction"] <- prediction3[,1]
test3[,"diff"] <- test3$price - test3$prediction
test3
View(test2)
View(test3)
ggplot(data=test3[], aes(x=test3[]$price,y=test3[]$prediction))+geom_point(alpha = 1, aes(color=company))+geom_abline(slope = 1)+coord_cartesian(xlim = c(0,3000), ylim = c(0,3000))
#ggplot(data=test2[], aes(x=c(1:count(test2)), y=test2[]$diff))+ geom_point()
ggplot(data=test2[], aes(x=test2[]$price,y=test2[]$prediction))+geom_point(alpha = 1, aes(color=company))+geom_abline(slope = 1)+coord_cartesian(xlim = c(0,3000), ylim = c(0,3000))
R2_Score(test3[]$prediction,test3[]$price)
MAE(test3[]$prediction,test3[]$price)
MAPE(test3[]$prediction,test3[]$price)
View(test3)
View(test3)
test3 <- test3[,-c(7:199)]
View(test3)
View(prepro)
summary(out3)
View(prepro)
dmy <- dummyVars(formula = ~model, data = prepro)
dmy
prepro_test <- data.frame(prepro,predict(dmy, newdata = prepro))
prepro_test
#test, train table 분리
smp_size <- floor(0.7 * nrow(prepro_test))
set.seed(456)
train_ind <- sample(seq_len(nrow(prepro_test)), size = smp_size)
train3 <- prepro_test[train_ind, ]
test3 <- prepro_test[-train_ind, ]
out3 = lm(price~., data=train3[,c(4,6,7:199)])
summary(out3)
confint.default(out3)
prediction3 <- round(predict(out3,test3,interval = "prediction"),0)
test3[,"prediction"] <- prediction3[,1]
test3[,"diff"] <- test3$price - test3$prediction
test3 <- test3[,-c(7:199)]
ggplot(data=test3[], aes(x=test3[]$price,y=test3[]$prediction))+geom_point(alpha = 1, aes(color=company))+geom_abline(slope = 1)+coord_cartesian(xlim = c(0,3000), ylim = c(0,3000))
R2_Score(test3[]$prediction,test3[]$price)
MAPE(test3[]$prediction,test3[]$price)
MAE(test3[]$prediction,test3[]$price)
dmy <- dummyVars(formula = ~model, data = prepro)
dmy
prepro_test <- data.frame(prepro,predict(dmy, newdata = prepro))
prepro_test
#test, train table 분리
smp_size <- floor(0.7 * nrow(prepro_test))
set.seed(456)
train_ind <- sample(seq_len(nrow(prepro_test)), size = smp_size)
train3 <- prepro_test[train_ind, ]
test3 <- prepro_test[-train_ind, ]
out3 = lm(price~., data=train3[,c(4,6,7:199)])
summary(out3)
confint.default(out3)
prediction3 <- round(predict(out3,test3,interval = "prediction"),0)
prediction3 <- round(predict(out3,test3,interval = "prediction"),0)
confint.default(out3)
summary(out3)
prediction3 <- round(predict(out3,test3,interval = "coefficients"),0)
prediction3 <- round(predict(out3,test3,interval = "coefficient"),0)
prediction3 <- round(predict(out3,test3,interval = "confidence"),0)
prediction3 <- round(predict(out3,test3,interval = "prediction"),0)
test3[,"prediction"] <- prediction3[,1]
test3[,"diff"] <- test3$price - test3$prediction
test3 <- test3[,-c(7:199)]
ggplot(data=test3[], aes(x=test3[]$price,y=test3[]$prediction))+geom_point(alpha = 1, aes(color=company))+geom_abline(slope = 1)+coord_cartesian(xlim = c(0,3000), ylim = c(0,3000))
test3 <- test3[,-c(7:199)]
test3 <- prepro_test[-train_ind, ]
out3 = lm(price~., data=train3[,c(4,6,7:199)])
prediction3 <- round(predict(out3,test3,interval = "prediction"),0)
test3[,"prediction"] <- prediction3[,1]
test3[,"diff"] <- test3$price - test3$prediction
test3 <- test3[,-c(8:199)]
ggplot(data=test3[], aes(x=test3[]$price,y=test3[]$prediction))+geom_point(alpha = 1, aes(color=company))+geom_abline(slope = 1)+coord_cartesian(xlim = c(0,3000), ylim = c(0,3000))
R2_Score(test3[]$prediction,test3[]$price)
MAPE(test3[]$prediction,test3[]$price)
MAE(test3[]$prediction,test3[]$price)
R2_Score(test2[]$prediction,test2[]$price)
MAPE(test2[]$prediction,test2[]$price)
MAE(test2[]$prediction,test2[]$price)
R2_Score(test1[]$prediction,test1[]$price)
MAPE(test1[]$prediction,test1[]$price)
MAE(test1[]$prediction,test1[]$price)
predict(out3,data,frame(1,"현대","테스트",10,"가솔린",200,2000),interval = "prediction")
predict(out3,data.frame(1,"현대","테스트",10,"가솔린",200,2000),interval = "prediction")
data.frame(1,"현대","테스트",10,"가솔린",200,2000)
data.frame(X:1,"현대","테스트",10,"가솔린",200,2000)
data.frame("X":1,"현대","테스트",10,"가솔린",200,2000)
data.frame("X"=1,"현대","테스트",10,"가솔린",200,2000)
data.frame("X"=1,"company"="현대", "model"="테스트","old"=10,  "fuel"="가솔린","km"=200,"price"=2000)
predict(out3,test_case,interval = "prediction")
#### 테스트 케이스 입력 ####
test_case <- data.frame("X"=1,"company"="현대", "model"="테스트","old"=10,  "fuel"="가솔린","km"=200,"price"=2000)
predict(out3,test_case,interval = "prediction")
#### 테스트 케이스 입력 ####
test_case <- data.frame("X"=1,"company"="현대", "model"="더 뉴 K5 2.0  프레스티지","old"=10,  "fuel"="가솔린","km"=200,"price"=2000)
predict(out3,test_case,interval = "prediction")
#### 테스트 케이스 입력 ####
test_case <- data.frame("X"=1,"company"="현대", "model"="더 뉴 K5 2.0  프레스티지","old"=10,  "fuel"="가솔린","km"=200,"price"=2000)
predict(out3,test_case,interval = "prediction")
#### 테스트 케이스 입력 ####
test_case = test3[1,]
View(test_case)
test3 <- prepro_test[-train_ind, ]
out3 = lm(price~., data=train3[,c(4,6,7:199)])
summary(out3)
confint.default(out3)
prediction3 <- round(predict(out3,test3,interval = "prediction"),0)
test3[,"prediction"] <- prediction3[,1]
#### 테스트 케이스 입력 ####
test_case = test3[1,]
test_case <- data.frame("X"=1,"company"="현대", "model"="더 뉴 K5 2.0  프레스티지","old"=10,  "fuel"="가솔린","km"=200,"price"=2000)
test_case <- test_case("X"=1,"company"="현대", "model"="더 뉴 K5 2.0  프레스티지","old"=10,  "fuel"="가솔린","km"=200,"price"=2000)
test_case <- test_case["X"=1,"company"="현대", "model"="더 뉴 K5 2.0  프레스티지","old"=10,  "fuel"="가솔린","km"=200,"price"=2000]
test3 <- prepro_test[-train_ind, ]
[1,]
#### 테스트 케이스 입력 ####
test_case = test3[1,]
est_case[1,1] <-1
test_case[1,2] <- "현대"
test_case[1,3] <- "더 뉴 K5 2.0  프레스티지"
test_case[1,4] <-10
test_case[1,5] <- "가솔린"
test_case[1,6] <- 200
test_case[1
,7] <- 2000
predict(out3,test_case,interval = "prediction")
test_case[1,"company"] <- "현대"
#### 테스트 케이스 입력 ####
test_case = test3[1,]
test_case[1,"company"] <- "현대"
test_case[1,"model"] <- "더 뉴 K5 2.0  프레스티지"
test_case[1,"old"] <-10
test_case[1,"fuel"] <- "가솔린"
test_case[1,"km"] <- 200
test_case[1,"price"] <- 2000
test_case[1,8:199] <- 0
test_case[1,test_case$model]
test_case[1,test_case$model] <- 1
test_case[1,test_case$model] <- 1
str(test_case[1,test_case$model])
test_case[1,test_case$model] <-1
test_case[1,test_case$model] <- 0
test_case[1,test_case$model] <- "1"
test_case[1,test_case$model] <- 1
test_case[1,test_case$model] <- num(1)
test_case[1,test_case$model] <- as.numeric(1)
test_case[1,test_case$model]
class(test_case[1,test_case$model])
names(test_case[1,test_case$model])
names(test_case[1,"company"])
names(test_case[1,test_case$model]) = 1
test_case[1,"model"] <- "더 뉴 K5 2.0  프레스티지"
names(test_case[1,test_case$model]) = 1
test_case$model
paste(test_case$model)
paste("model.",test_case$model)
paste("model.",test_case$model,collapse ="")
paste("model.",test_case$model,sep ="")
names(test_case[1,paste("model.",test_case$model,sep ="")]) = 1
test_case[1,"model"] <- "K5"
paste("model.",test_case$model,sep ="")
names(test_case[1,test_case$model]) = 1
names(test_case[1,paste("model.",test_case$model,sep ="")]) = 1
names(test_case[1,paste("model.",test_case$model,sep ="")]) = 1
test_case[1,paste("model.",test_case$model,sep ="")] = 1
test_case[1,"model"] <- "더 뉴 K5 2.0  프레스티지"
test_case[1,paste("model.",test_case$model,sep ="")] = 1
#### 테스트 케이스 입력 ####
test_case = test3[1,]
test_case[1,8:199] <- 0
test_case[1,"company"] <- "현대"
test_case[1,"model"] <- "더 뉴 K5 2.0  프레스티지"
test_case[1,paste("model.",test_case$model,sep ="")] = 1
test_case[1,"old"] <-10
test_case[1,"fuel"] <- "가솔린"
test_case[1,"km"] <- 200
test_case[1,"price"] <- 2000
predict(out3,test_case,interval = "prediction")
test_case[1,"km"] <- 2000
predict(out3,test_case,interval = "prediction")
test_case[1,"km"] <- 20000
predict(out3,test_case,interval = "prediction")
test_case[1,"old"] <-65
test_case[1,"fuel"] <- "가솔린"
test_case[1,"km"] <- 70000
test_case[1,"price"] <- 2000
predict(out3,test_case,interval = "prediction")
test_case[1,8:199] <- 0
test_case[1,"company"] <- "기아"
test_case[1,"model"] <- "더 뉴 K5 2.0  프레스티지"
test_case[1,paste("model.",test_case$model,sep ="")] = 1
test_case[1,"old"] <-65
test_case[1,"fuel"] <- "가솔린"
test_case[1,"km"] <- 70000
test_case[1,"price"] <- 2000
predict(out3,test_case,interval = "prediction")
test3 <- test3[,-c(8:199)]
test3[,"prediction"] <- prediction3[,1]
test3[,"diff"] <- test3$price - test3$prediction
test_case[1,"company"] <- "기아"
test_case[1,"model"] <- "더 뉴 K5 2.0 프레스티지"
test_case[1,paste("model.",test_case$model,sep ="")] = 1
test_case[1,"old"] <- 75
test_case[1,"fuel"] <- "가솔린"
test_case[1,"km"] <- 100000
test_case[1,"price"] <- 2000
predict(out3,test_case,interval = "prediction")
#### 테스트 케이스 입력 ####
test_case = test3[1,]
#### 테스트 케이스 입력 ####
test_case = test2[1,]
test3 <- prepro_test[-train_ind, ]
#### 테스트 케이스 입력 ####
test_case = test3[1,]
test_case[1,8:199] <- 0
test_case[1,"company"] <- "기아"
test_case[1,"model"] <- "더 뉴 K5 2.0 프레스티지"
test_case[1,paste("model.",test_case$model,sep ="")] = 1
test_case[1,"old"] <- 75
test_case[1,"fuel"] <- "가솔린"
test_case[1,"km"] <- 100000
test_case[1,"price"] <- 2000
predict(out3,test_case,interval = "prediction")
test3 <- test3[,-c(8:199)]
test3[,"prediction"] <- prediction3[,1]
test3[,"diff"] <- test3$price - test3$prediction
test_case[1,8:199] <- 0
test_case[1,"company"] <- "기아"
test_case[1,"model"] <- "더 뉴 K5 2.0 프레스티지"
test_case[1,paste("model.",test_case$model,sep ="")] = 1
test_case[1,"old"] <- 75
test_case[1,"fuel"] <- "가솔린"
test_case[1,"km"] <- 100000
test_case[1,"price"] <- 1120
predict(out3,test_case,interval = "prediction")
predict(out3,test_case)
,interval = "prediction"
predict(out3,test_case,interval = "prediction")
est_case[1,8:199] <- 0
test_case[1,"company"] <- "기아"
test_case[1,"model"] <- "K5 2.0  트렌디"
test_case[1,paste("model.",test_case$model,sep ="")] = 1
test_case[1,"old"] <- 83
test_case[1,"fuel"] <- "가솔린"
test_case[1,"km"] <- 130000
test_case[1,"price"] <- 1120
predict(out3,test_case,interval = "prediction")
test_case[1,8:199] <- 0
test_case[1,"company"] <- "기아"
test_case[1,"model"] <- "더 뉴 K5 2.0 프레스티지"
test_case[1,paste("model.",test_case$model,sep ="")] = 1
test_case[1,"old"] <- 75
test_case[1,"fuel"] <- "가솔린"
test_case[1,"km"] <- 100000
test_case[1,"price"] <- 1120
predict(out3,test_case,interval = "prediction")
est_case[1,8:199] <- 0
test_case[1,"company"] <- "기아"
test_case[1,"model"] <- "더 뉴 K5 2.0  프레스티지"
test_case[1,paste("model.",test_case$model,sep ="")] = 1
test_case[1,"old"] <- 75
test_case[1,"fuel"] <- "가솔린"
test_case[1,"km"] <- 100000
test_case[1,"price"] <- 1120
predict(out3,test_case,interval = "prediction")
t_case[1,8:199] <- 0
test_case[1,"company"] <- "기아"
test_case[1,"model"] <- "더 뉴 K5 2.0  프레스티지"
test_case[1,paste("model.",test_case$model,sep ="")] = 1
test_case[1,"old"] <- 69
test_case[1,"fuel"] <- "가솔린"
test_case[1,"km"] <- 80000
test_case[1,"price"] <- 1120
predict(out3,test_case,interval = "prediction")
st_case[1,8:199] <- 0
test_case[1,"company"] <- "기아"
test_case[1,"model"] <- "더 뉴 K5 2세대 2.0 가솔린 인텔리전트"
test_case[1,paste("model.",test_case$model,sep ="")] = 1
test_case[1,"old"] <- 23
test_case[1,"fuel"] <- "가솔린"
test_case[1,"km"] <- 10000
test_case[1,"price"] <- 1120
predict(out3,test_case,interval = "prediction")
extractNoun(c("최악. 첫차앱 검증된 딜러라고 하지만 결국 일반 딜러와 다를바 없음. 모르면 돈뜯김 아니 알아도 뜯긴다. 어떻게든 안좋은 차를 좋게 포장해서 팔아야 하는게임. 우린 그걸 알아봐야 하는 게임. 작정하고 속이려는 수법이 나날로 발전하지만 차를 20번 30번씩 바꾸는게 아니면 알 도리가 없음. 특히 서서울모터리움(이*희) 절대 가지마라 재발 다들 당하고 큰돈 내고 배움(이라고 읽고 삥뜯긴다고 표현)을 겪을거다.",
"일정한 조건에 따르면, 자유롭게 이것을 재배포할수가 있습니다.")
)
library(stringr)
library(KoNLP)
library(Sejong)
library(hash)
library(rJava)
library(tau)
library(RSQLite)
library(devtools)
extractNoun(c("최악. 첫차앱 검증된 딜러라고 하지만 결국 일반 딜러와 다를바 없음. 모르면 돈뜯김 아니 알아도 뜯긴다. 어떻게든 안좋은 차를 좋게 포장해서 팔아야 하는게임. 우린 그걸 알아봐야 하는 게임. 작정하고 속이려는 수법이 나날로 발전하지만 차를 20번 30번씩 바꾸는게 아니면 알 도리가 없음. 특히 서서울모터리움(이*희) 절대 가지마라 재발 다들 당하고 큰돈 내고 배움(이라고 읽고 삥뜯긴다고 표현)을 겪을거다.",
"일정한 조건에 따르면, 자유롭게 이것을 재배포할수가 있습니다.")
)
extractNoun(c("최악. 첫차앱 검증된 딜러라고 하지만 결국 일반 딜러와 다를바 없음. 모르면 돈뜯김 아니 알아도 뜯긴다. 어떻게든 안좋은 차를 좋게 포장해서 팔아야 하는게임. 우린 그걸 알아봐야 하는 게임. 작정하고 속이려는 수법이 나날로 발전하지만 차를 20번 30번씩 바꾸는게 아니면 알 도리가 없음. 특히 서서울모터리움(이*희) 절대 가지마라 재발 다들 당하고 큰돈 내고 배움(이라고 읽고 삥뜯긴다고 표현)을 겪을거다.",
"딜러들 가격후려치기 너무심하고 성의가없어요~! 뼈가되는 개선사항을 작성했으니 충전기주세요♡")
)
SimplePos09("최악. 첫차앱 검증된 딜러라고 하지만 결국 일반 딜러와 다를바 없음. 모르면 돈뜯김 아니 알아도 뜯긴다. 어떻게든 안좋은 차를 좋게 포장해서 팔아야 하는게임. 우린 그걸 알아봐야 하는 게임. 작정하고 속이려는 수법이 나날로 발전하지만 차를 20번 30번씩 바꾸는게 아니면 알 도리가 없음. 특히 서서울모터리움(이*희) 절대 가지마라 재발 다들 당하고 큰돈 내고 배움(이라고 읽고 삥뜯긴다고 표현)을 겪을거다.")
extractNoun(c("최악. 첫차앱 검증된 딜러라고 하지만 결국 일반 딜러와 다를바 없음. 모르면 돈뜯김 아니 알아도 뜯긴다. 어떻게든 안좋은 차를 좋게 포장해서 팔아야 하는게임. 우린 그걸 알아봐야 하는 게임. 작정하고 속이려는 수법이 나날로 발전하지만 차를 20번 30번씩 바꾸는게 아니면 알 도리가 없음. 특히 서서울모터리움(이*희) 절대 가지마라 재발 다들 당하고 큰돈 내고 배움(이라고 읽고 삥뜯긴다고 표현)을 겪을거다.",
"파는사람은모르겠는데, 거의 태반은 비싸게 올라오네요~~사는사람은 엔카가 나을듯요 K5 구모델보고 깜짝놀랬습니다. 뉴k5 가격이랑 차이없이 올려버리네요~~ 개인차팔이들도 성행하는듯 보이네요 직거래 미끼로 호구들만 낚여 후회할듯요~~ 엔카처럼 앱에서 평가나,시세에 대한 소비자에 대한 배려가 있었으면, 합니다. 파는사람은 비싸게 파니, 판매되는게 몇없겠고. 사는 사람은 보증도 안된 개인매물이 비싸니, 이앱에서 구매하겠습니까? 가격뿐 아니라,차에대한 성능분석표도 없네요.")
)
table <- extractNoun(c("최악. 첫차앱 검증된 딜러라고 하지만 결국 일반 딜러와 다를바 없음. 모르면 돈뜯김 아니 알아도 뜯긴다. 어떻게든 안좋은 차를 좋게 포장해서 팔아야 하는게임. 우린 그걸 알아봐야 하는 게임. 작정하고 속이려는 수법이 나날로 발전하지만 차를 20번 30번씩 바꾸는게 아니면 알 도리가 없음. 특히 서서울모터리움(이*희) 절대 가지마라 재발 다들 당하고 큰돈 내고 배움(이라고 읽고 삥뜯긴다고 표현)을 겪을거다.",
"파는사람은모르겠는데, 거의 태반은 비싸게 올라오네요~~사는사람은 엔카가 나을듯요 K5 구모델보고 깜짝놀랬습니다. 뉴k5 가격이랑 차이없이 올려버리네요~~ 개인차팔이들도 성행하는듯 보이네요 직거래 미끼로 호구들만 낚여 후회할듯요~~ 엔카처럼 앱에서 평가나,시세에 대한 소비자에 대한 배려가 있었으면, 합니다. 파는사람은 비싸게 파니, 판매되는게 몇없겠고. 사는 사람은 보증도 안된 개인매물이 비싸니, 이앱에서 구매하겠습니까? 가격뿐 아니라,차에대한 성능분석표도 없네요.")
)
wordlist <- extractNoun(c("최악. 첫차앱 검증된 딜러라고 하지만 결국 일반 딜러와 다를바 없음. 모르면 돈뜯김 아니 알아도 뜯긴다. 어떻게든 안좋은 차를 좋게 포장해서 팔아야 하는게임. 우린 그걸 알아봐야 하는 게임. 작정하고 속이려는 수법이 나날로 발전하지만 차를 20번 30번씩 바꾸는게 아니면 알 도리가 없음. 특히 서서울모터리움(이*희) 절대 가지마라 재발 다들 당하고 큰돈 내고 배움(이라고 읽고 삥뜯긴다고 표현)을 겪을거다.",
"파는사람은모르겠는데, 거의 태반은 비싸게 올라오네요~~사는사람은 엔카가 나을듯요 K5 구모델보고 깜짝놀랬습니다. 뉴k5 가격이랑 차이없이 올려버리네요~~ 개인차팔이들도 성행하는듯 보이네요 직거래 미끼로 호구들만 낚여 후회할듯요~~ 엔카처럼 앱에서 평가나,시세에 대한 소비자에 대한 배려가 있었으면, 합니다. 파는사람은 비싸게 파니, 판매되는게 몇없겠고. 사는 사람은 보증도 안된 개인매물이 비싸니, 이앱에서 구매하겠습니까? 가격뿐 아니라,차에대한 성능분석표도 없네요.")
)
#table함수를 이용해서 단어의 빈도수 구하기
tablewordlist <- table(wordlist)
View(table)
View(wordlist)
#table함수를 이용해서 단어의 빈도수 구하기
wordlist
wordlist <- extractNoun(c("최악. 첫차앱 검증된 딜러라고 하지만 결국 일반 딜러와 다를바 없음. 모르면 돈뜯김 아니 알아도 뜯긴다. 어떻게든 안좋은 차를 좋게 포장해서 팔아야 하는게임. 우린 그걸 알아봐야 하는 게임. 작정하고 속이려는 수법이 나날로 발전하지만 차를 20번 30번씩 바꾸는게 아니면 알 도리가 없음. 특히 서서울모터리움(이*희) 절대 가지마라 재발 다들 당하고 큰돈 내고 배움(이라고 읽고 삥뜯긴다고 표현)을 겪을거다.",
"파는 사람은 모르겠는데, 거의 태반은 비싸게 올라오네요~~사는사람은 엔카가 나을듯요 K5 구모델보고 깜짝놀랬습니다. 뉴k5 가격이랑 차이없이 올려버리네요~~ 개인차팔이들도 성행하는듯 보이네요 직거래 미끼로 호구들만 낚여 후회할듯요~~ 엔카처럼 앱에서 평가나,시세에 대한 소비자에 대한 배려가 있었으면, 합니다. 파는사람은 비싸게 파니, 판매되는게 몇없겠고. 사는 사람은 보증도 안된 개인매물이 비싸니, 이앱에서 구매하겠습니까? 가격뿐 아니라,차에대한 성능분석표도 없네요.")
)
#table함수를 이용해서 단어의 빈도수 구하기
tablewordlist <- table(wordlist)
#table함수를 이용해서 단어의 빈도수 구하기
tablewordlist <- table(wordlist[])
#table함수를 이용해서 단어의 빈도수 구하기
tablewordlist <- table(wordlist[1])
tablewordlist[1]
tablewordlist[89]
#table함수를 이용해서 단어의 빈도수 구하기
tablewordlist <- table(wordlist[1:2])
#table함수를 이용해서 단어의 빈도수 구하기
tablewordlist <- table(wordlist[2])
#table함수를 이용해서 단어의 빈도수 구하기
tablewordlist <- table(wordlist[1])
tablewordlist
#table함수를 이용해서 단어의 빈도수 구하기
tablewordlist <- table(wordlist[2])
tablewordlist
summary(out3)
confint.default(out3)
ggplot(data=test3[], aes(x=test3[]$price,y=test3[]$prediction))+geom_point(alpha = 1, aes(color=company))+geom_abline(slope = 1)+coord_cartesian(xlim = c(0,3000), ylim = c(0,3000)) + geom_point(size = 5, aes(color = lg))
ggplot(data=test3[], aes(x=test3[]$price,y=test3[]$prediction))+geom_point(alpha = 1, aes(color=company))+geom_abline(slope = 1)+coord_cartesian(xlim = c(0,3000), ylim = c(0,3000)) + geom_point(size = 5)
ggplot(data=test3[], aes(x=test3[]$price,y=test3[]$prediction))+geom_point(alpha = 1, size=3, aes(color=company))+geom_abline(slope = 1)+coord_cartesian(xlim = c(0,3000), ylim = c(0,3000))
ggplot(data=test3[], aes(x=test3[]$price,y=test3[]$prediction))+geom_point(alpha = 1, size=4, aes(color=company))+geom_abline(slope = 1)+coord_cartesian(xlim = c(0,3000), ylim = c(0,3000))
ice)
MAPE(test3[]$prediction,test3[]$price)
MAE(test3[]$prediction,test3[]$price)
R2_Score(test3[]$prediction,test3[]$price)
MAPE(test3[]$prediction,test3[]$price)
MAE(test3[]$prediction,test3[]$price)
out2
pairs.panels(train1,method = "pearson", density = TRUE, ellipses = TRUE, hist.col = "#00AFBB",scale=TRUE)
pairs(train1$price~train1$old+train1$km, lower.panel = NULL)
pairs(train2$price~train2$old+train2$km, lower.panel = NULL)
pairs.panels(train2,method = "pearson", density = TRUE, ellipses = TRUE, hist.col = "#00AFBB",scale=TRUE)
pairs(train3$price~train3$old+train3$km, lower.panel = NULL)
cor(train3$price~train3$old+train3$km)
cor(train3$price,train3$old,train3$km)
cor(train3$price,train3$old,train3$km)
cor(prepro[c(3,5,6)])
cor(prepro[c(3,5,6)])
pairs(prepro[c(3,5,6)])
View(prepro)
cor(prepro[c(4,6,7)])
pairs(prepro[c(4,6,7)])
pairs(train3$price~train3$old+train3$km, lower.panel = NULL)
cor(prepro[c(4,6,7)])
pairs(prepro[c(7,4,6)])
cor(prepro[c(7,4,6)])
summary(out3)
confint.default(out3)
out3
plot(out3)
