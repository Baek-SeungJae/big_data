install.packages("stringr")
#패턴
mytext <- "test$uuuuu"
mytext2 <- "https://cran.r-project.org/"
str_extract(mytext2,".+[:]+")
library("stringr")
#패턴
mytext <- "test$uuuuu"
mytext2 <- "https://cran.r-project.org/"
str_extract(mytext2,".+[:]+")
str_extract(mytext2,".+[:]")
str_extract(mytext2,".+(:)")
str_extract(mytext2,".+(:)+")
str_extract(mytext2,".+(:)+.")
str_extract(mytext2,".+(:)+.+")
str_extract(mytext2,".+(:)")
str_extract(mytext2,".+(:)-")#패턴과 일치하는 문자열이 같이 검색
str_extract(mytext2,".+^(:)")#패턴과 일치하는 문자열이 같이 검색
str_extract(mytext2,".+(^:)")#패턴과 일치하는 문자열이 같이 검색
str_extract(mytext2,".+(:)")#패턴과 일치하는 문자열이 같이 검색
str_extract(mytext2,".+(?=:)")#패턴과 일치하는 문자열이 같이 검색
str_extract(mytext2,".+(:)")#패턴과 일치하는 문자열이 같이 검색
str_extract(mytext2,".+(?=:)")#패턴과 일치하는 문자열이 같이 검색
str_extract(mytext2,"(?=:)+.+")
str_extract(mytext2,"(?=:).+")
str_extract(mytext2,"(:).+")
str_extract(mytext2,"(:?=).+")
str_extract(mytext2,"(?<:).+")
str_extract(mytext2,"(?<=:).+")
str_extract(mytext2,"(?<=:).*")
#문자열 관련 함수
#paste - 벡터를 연결해서 하나의 문자열로 생성
#paste() - 여러 개를 연결
str <- c("java", "hadoop", "R", "mongodb")
paste(str,collapse=",")
paste0(mytext,mytext2)
#패턴
mytext <- "     test$uuuuu"
paste0(mytext,mytext2)
data <- gsub("u","","mytext")
data
data <- gsub("u","",mytext)
data
length(data)
str_trim(data)
install.packages(mongolite)
install.packages("mongolite")
library("mongolite")
library("stringr")
url_data <- readLines(url)
url_data <- readLines(url,encoding = "UTF-8")
url <- "https://newsstand.naver.com/?list=ct1&pcode=005"
url_data <- readLines(url,encoding = "UTF-8")
url_data
#정보확인======================================
class(url_data)
#정보확인======================================
#class(url_data)
head(url_data)
tale(url_data)
tail(url_data)
url <- "https://www.clien.net/service/board/park"
url_data <- readLines(url,encoding = "UTF-8")
#정보확인======================================
#class(url_data)
#length(url_data)
head(url_data)
#정보확인======================================
#class(url_data)
#length(url_data)
#head(url_data)
tail(url_data)
cor.test(test1$mid_jumsu,test2$final_jumsu)
xtabs(~test1$mid_jumsu+test2$final_jumsu)
out = lm(test1$mid_jumsu~test2$final_jumsu)
out
summary(out)
confint.default(out)
plot(test1$mid_jumsu~test2$final_jumsu)
abline(out,col="red")
xtabs(~math+science,data=exam)
out = lm(math~science,data=exam)
summary(out)
plot(math~science,data=exam)
abline(out,col="red")
#### 개요####
# 주어진 데이터에서 원하는 데이터만 추출
# dplyr은 문자열에 대한 작업에 특화된 기능이 많은 패키지
# C++로 구현되어 있어 가장 빠르다.
# dplyr라이브러리는 실행할 때 코드 전체를 범위지정해서 실행
library("dplyr")
data("airquality")
df <- airquality
head(df2)
df2 <- df[df$Day==1,]
df2 <- df[df$Day!=1,]
df[df$Day==1 | df$Day==2,]
df2
df2_data2 <- df2[df$Day %in% 1:2,]
sum(df$Day %in% 1:2)
df2_data2
nrow(df2_data2)
#dplyr패키지에서 지원하는 필터 관련 함수
filter(df,Day==1 & Month==5)
filter(df,Day %in% c(1,3,5))
#### 교재의 예제####
exam <-read.csv("data/csv_exam.csv")
exam
exam %>% filter(class==1)
exam %>% filter(class==2)
exam %>% filter(class==3)
exam %>% filter(class==4)
exam %>% filter(class==5)
exam %>%
filter(class==1) %>%
filter(math>=50)
#미쳤다....
#select
exam %>% select(-class)
#arrange
exam %>% arrange(id)
exam %>% arrange(desc(id))
exam %>% arrange(desc(math)) %>% arrange(class)
exam %>% mutate(total=math+english+science, mean = total/3, info = ifelse((science>=70),"통과","재시험")) %>% head
exam %>%
group_by(class) %>%
summarise(math_sum = sum(math),
math_mean = mean(math),
math_median = median(math),
math_count = n()
)
test1 <- data.frame(id=c(1,2,3,4,5),
mid_jumsu=c(77,56,99,100,99))
test2 <- data.frame(id=c(1,2,3,4,5),
final_jumsu=c(69,45,84,93,90))
namedata <- data.frame(class=c(1,2,3,4,5),
teacher=c("kim","lee","park","jang","hong"), stringsAsFactors = F)
str(namedata)
exam_new <-left_join(exam,namedata,by="class")
exam_new
groupA <- data.frame(id=c(1,2,3,4,5),
mid_jumsu=c(77,56,99,100,99))
groupB <- data.frame(id=c(6,7,8,9,10),
mid_jumsu=c(51,65,23,98,32))
group_total <- bind_rows(groupA,groupB)
group_total
cor.test(test1$mid_jumsu,test2$final_jumsu)
xtabs(~test1$mid_jumsu+test2$final_jumsu)
out = lm(test1$mid_jumsu~test2$final_jumsu)
out
summary(out)
confint.default(out)
plot(test1$mid_jumsu~test2$final_jumsu)
abline(out,col="red")
xtabs(~math+science,data=exam)
out = lm(math~science,data=exam)
summary(out)
plot(math~science,data=exam)
abline(out,col="red")
url_data[200]
library("mongolite")
library("stringr")
library("mongolite")
library("stringr")
url <- "https://www.clien.net/service/board/park"
url_data <- readLines(url,encoding = "UTF-8")
url_data[200]
#조건에 만족하는 데이터를 필터링
#문자열에 패턴을 적용해서 일치 여부를 T/F로 리턴
str_detect()
url_data[]
#조건에 만족하는 데이터를 필터링
#문자열에 패턴을 적용해서 일치 여부를 T/F로 리턴
#1. str_detect(패턴을 검사할 문자열, 패턴)를 이용해서 웹페이지 전체에서 필요한 데이터만 먼저 추출
filter_data <-url_data[str_detect(url_data, "subject_fixed")]
#2. 추출한 데이터 전체에서 내가 필요한 문자열만 추출
filter_data
#2. 추출한 데이터 전체에서 내가 필요한 문자열만 추출
#str_extract -> 패턴에 일치하는 문자열을 리턴
#후방, 전방 탐색 정규 표현식
data <- gsub("\t\t\t\t\t\t<span class=\"subject_fixed\" data-role=\"list-title-text\" title=\"","",filter_data)
data
data <- gsub("</span>","",filter_data)
data
#2. 추출한 데이터 전체에서 내가 필요한 문자열만 추출
#str_extract -> 패턴에 일치하는 문자열을 리턴
#후방, 전방 탐색 정규 표현식
data <- gsub("\t\t\t\t\t\t<span class=\"subject_fixed\" data-role=\"list-title-text\" title=\"","",filter_data)
data <- gsub("</span>","",data)
data
str_extract(data,".+\>")
str_extract(data,".+\\>")
str_extract(data,".+[=?\\>]")
str_extract(data,".+[=?\>]")
str_extract(data,"(?<=\\>).*")
url_data[str_detect(url_data,"<span class=\"hit\">")]
hit_data <-url_data[str_detect(url_data,"<span class=\"hit\">")]
str_extract(hit_data,".+(?=\"hit\">)")
str_extract(hit_data,".+(?=</span>")
str_extract(hit_data,".+(?=\</span\>")
str_extract(hit_data,".+(?=\\</span\\>")
str_extract(hit_data,"(?<\=\">).*(?=</span>)")
str_extract(hit_data,"(?<=\">).*(?=</span>)")
hit_data <- str_extract(hit_data,"(?<=\">).*(?=</span>)")
####데이터 필터링 : title ####
hit_data <- url_data[str_detect(url_data,"<span class=\"hit\">")]
hit_data
hit <- str_extract(hit_data,"(?<=\">).*(?=</span>)")
hit
myurl <- url_data[str_detect(url_data,"subject_fixed")]
myurl
####데이터 필터링 : url
str_detect(url_data,"subject_fixed")
witch(str_detect(url_data,"subject_fixed"))
witch (str_detect(url_data,"subject_fixed"))
which(str_detect(url_data,"subject_fixed"))
which(str_detect(url_data,"subject_fixed"))-2
url_data[(which(str_detect(url_data,"subject_fixed"))-2)]
myurl <- url_data[(which(str_detect(url_data,"subject_fixed"))-2)]
myurl
myurl <- str_extract(hit_data,"(?<=href=\").*(?=data-role")
myurl <- str_extract(hit_data,"(?<=href=\").*(?=data-role)")
myurl
myurl <- url_data[(which(str_detect(url_data,"subject_fixed"))-2)]
myurl
myurl <- str_extract(hit_data,"(?<=href=\").*(?=data-role)")
myurl
myurl <- url_data[(which(str_detect(url_data,"subject_fixed"))-2)]
myurl
myurl <- str_extract(hit_data,"(?<=href=\").*(?=data-role)")
myurl
myurl <- str_extract(myurl,"(?<=href=\").*(?=data-role)")
myurl <- url_data[(which(str_detect(url_data,"subject_fixed"))-2)]
myurl
myurl <- str_extract(myurl,"(?<=href=\").*(?=data-role)")
myurl
myurl <- url_data[(which(str_detect(url_data,"subject_fixed"))-2)]
myurl
myurl <- str_extract(myurl,".*(?=\")")
myurl
myurl <- url_data[(which(str_detect(url_data,"subject_fixed"))-2)]
myurl
myurl <- str_extract(myurl,"(?<=href=\").*(?=data-role)")
myurl
myurl <- str_extract(myurl,".*(?=\")")
myurl
myurl <- paste0("https://www.clien.net",myurl)
myurl
data.frame(data,hit,myurl)
data.frame(data,hit)
data.frame(data)
